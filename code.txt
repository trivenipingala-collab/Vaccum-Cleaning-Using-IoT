include <Servo.h> // Include Servo library

#define in1 2 // L298N Motor Driver pins
#define in2 3
#define in3 4
#define in4 5
#define relayPin 8 // Relay pin for vacuum cleaner
#define trigPin 6 // Ultrasonic sensor trigger pin
#define echoPin 7 // Ultrasonic sensor echo pin
#define servoPin 11 // Servo motor pin

Servo servo; // Create servo object
int command; // Received command from Bluetooth
int vacuumState = LOW; // Track vacuum cleaner state
bool autoMode = false; // Track if in automatic mode

void setup() {
  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  pinMode(in3, OUTPUT);
  pinMode(in4, OUTPUT);
  pinMode(relayPin, OUTPUT);
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
 
  digitalWrite(relayPin, LOW); // Start with vacuum off
  servo.attach(servoPin); // Attach servo to pin
  servo.write(90); // Start servo at center (90 degrees)
 
  Serial.begin(9600); // Bluetooth baud rate
}

void loop() {
  if (Serial.available() > 0) {
    command = Serial.read();
   
    switch (command) {
      case 'F': autoMode = false; forward(); break;
      case 'B': autoMode = false; back(); break;
      case 'L': autoMode = false; left(); break;
      case 'R': autoMode = false; right(); break;
      case 'S': autoMode = false; Stop(); break;
      case 'V': toggleVacuum(); break;
      case 'A': autoMode = true; break; // Enter automatic mode
      default: autoMode = false; Stop(); break;
    }
  }
 
  if (autoMode) {
    obstacleAvoidance(); // Run obstacle avoidance in auto mode
  }
}

// Movement Functions
void forward() {
  digitalWrite(in1, HIGH);
  digitalWrite(in2, LOW);
  digitalWrite(in3, HIGH);
  digitalWrite(in4, LOW);
}

void back() {
  digitalWrite(in1, LOW);
  digitalWrite(in2, HIGH);
  digitalWrite(in3, LOW);
  digitalWrite(in4, HIGH);
}

void left() {
  digitalWrite(in1, LOW);
  digitalWrite(in2, HIGH);
  digitalWrite(in3, HIGH);
  digitalWrite(in4, LOW);
}

void right() {
  digitalWrite(in1, HIGH);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  digitalWrite(in4, HIGH);
}

void Stop() {
  digitalWrite(in1, LOW);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  digitalWrite(in4, LOW);
}

void toggleVacuum() {
  vacuumState = !vacuumState;
  digitalWrite(relayPin, vacuumState);
  Serial.print("Vacuum: ");
  Serial.println(vacuumState ? "ON" : "OFF");
}

// Ultrasonic distance measurement
long getDistance() {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
 
  long duration = pulseIn(echoPin, HIGH);
  long distance = duration * 0.034 / 2; // Convert to cm
  return distance;
}

// Obstacle avoidance logic
void obstacleAvoidance() {
  long distance;
 
  // Check front distance
  servo.write(90); // Look forward
  delay(200); // Wait for servo to move
  distance = getDistance();
 
  if (distance < 20) { // Obstacle within 20cm
    Stop();
    delay(500);
   
    // Check left
    servo.write(180); // Look left
    delay(500);
    long leftDistance = getDistance();
   
    // Check right
    servo.write(0); // Look right
    delay(500);
    long rightDistance = getDistance();
   
    // Decide direction
    if (leftDistance > rightDistance && leftDistance > 20) {
      left();
      delay(1000); // Turn for 1 second
    } else if (rightDistance > 20) {
      right();
      delay(1000); // Turn for 1 second
    } else {
      back();
      delay(1000); // Reverse if no clear path
    }
  } else {
    forward(); // Move forward if no obstacle
  }
}